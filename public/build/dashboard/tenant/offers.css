
h4[data-v-079c1b3e] {
  color: rgb(203, 153, 0);
  margin-bottom: 0px;
  font-size: 1.1rem;
}
hr[data-v-079c1b3e] {
  margin-top: 0;
}
.item-button[data-v-079c1b3e] {
  cursor: pointer;
  grid-area: itemButton;
  border: solid 1px #cb9900;
  color: black;
  background-color: rgba(255, 205, 53, 0.14);
}
.item-container-wrapper[data-v-079c1b3e] {
  border: solid 1px #e7e7e7;
  padding: 12px;
}
.item-image-box[data-v-079c1b3e] {
  cursor: pointer;
  grid-area: itemBanner;
}
.item-description[data-v-079c1b3e] {
  /* min-height: 96px !important; */
}
.item-flag[data-v-079c1b3e] {
  position: absolute;
  top: 24px;
  left: 36px;
  color: black;
  background-color: white;
  padding: 6px 10px;
  border: solid 1px #ccc;
  border-radius: 3px;
}
.item-type[data-v-079c1b3e] {
  position: relative;
  bottom: 48px;
  margin-bottom: -48px;
  padding: 12px;
  text-align: center;
  color: white;
  background: linear-gradient(transparent, black);
}
.v-lazy-image[data-v-079c1b3e] {
  opacity: 0.3;
  transition: opacity 1s;
}
.v-lazy-image-loaded[data-v-079c1b3e] {
  opacity: 1;
}
.stamp[data-v-079c1b3e] {
  z-index: 1;
  background: white;
  position: absolute;
  top: 6.2em;
  right: 39px;
  padding: 0.2em 0.5em;
  text-transform: uppercase;
  border-radius: 0.3rem;
  font-family: "Courier";
}
.is-sold[data-v-079c1b3e] {
  color: #c51829;
  background: white;
  border: 0.1rem solid #c51829;
  -webkit-mask-position: 13rem 6rem;
  transform: rotate(-32deg);
}
.btn-primary-outline[data-v-079c1b3e] {
  background-color: transparent;
  border-color: transparent;
}
.favorite[data-v-079c1b3e] {
  position: absolute;
  top: 5px;
  right: 36px;
  color: #fff;
}
.favorite .btn[data-v-079c1b3e] {
  border-radius: 0;
  padding: 0 3px;
  color: #fff;
  height: 25px;
  width: 28px;
  background-color: rgb(203, 153, 0);
  -webkit-text-stroke: 1px #fff;
}
.offerdeclined[data-v-079c1b3e] {
  text-decoration: line-through;
  color: #ccc;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/