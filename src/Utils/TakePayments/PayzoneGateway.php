<?php

namespace App\Utils\TakePayments;

use App\Entity\Finance\Gateway\TransactionLog;
use App\Utils\TakePayments\Gateway\Constants\HashMethod;
use App\Utils\TakePayments\Gateway\Constants\IntegrationType;
use App\Utils\TakePayments\Gateway\Constants\PayzoneResponseCss;
use App\Utils\TakePayments\Gateway\Constants\PayzoneResponseOutcomes;
use App\Utils\TakePayments\Gateway\Constants\ResultDeliveryMethod;
use App\Utils\TakePayments\Gateway\Constants\TransactionType;
use App\Utils\TakePayments\Helpers\Configuration;
use App\Utils\TakePayments\Helpers\PaymentData;
use App\Utils\TakePayments\Helpers\PayzoneHelper;
use Doctrine\ORM\EntityManagerInterface;

class PayzoneGateway
{
    private $plugin_version = '1.3.4';
    private $debug_mode; //debug mode active
    private $hosted_iframe; //Boolean to check for iframe loading
    private $hosted_cust_details; //Boolean to check whether to load customer details for hosted form, customer details can be entered or referenced from the merchant site or entered on the payzone site

    private $merchant_id; //Merchant ID -  accessible from the MMS
    private $merchant_password; //Gateway Password -  accessible from the MMS
    private $pre_shared_key; //Preshared key -  accessible from the MMS
    private $secret_key; //Secret for use by codebase  only - can be generated by user
    private $integration_type; //Hosted, Direct or Transparent
    private $hash_method; //Encryption / hash method - accessible from the MMS
    private $result_method; //Preferred method for results from hosted payment form POST or SERVER PULL
    private $transaction_type; //SALE or PREAUTH
    private $currency_code; //ISO currency code (i.e UK = 826)

    private $form_action_cart; //URL to post data to from the cart
    private $form_action_payment; //URL to post data to, to process payment
    private $paymentformresulturl; //callback url server_pull
    private $result_page; //cart page
    private $cart_page; //cart page
    private $home_page; //home page
    private $process_url; //Direct API processing
    private $process_refund_url; //Direct API REFUND processing
    private $loading_page; //URL for loading pages

    private $payzone_images; //show or hide Payzone Images

    private $paymentData;
    private $em;

    public function __construct(
        PaymentData $paymentData,
        EntityManagerInterface $em,
        Configuration $config
    ) {
        $this->em = $em;
        $this->paymentData = $paymentData;

        //##### DEVELOPER NOTE #####
        //#~~~~~~~~~~~~~~~~~~~~~~~~~~#
        // This Debug function is designed for testing only, using this in a production environment with real data is not recommended.
        // Debug Mode will stop the forms being generated and submitted in the background and will present the content to the user with a submit button, this mode will potentially expose confidential information if used in a production environment and it is strongly recommended to not use these in production.
        // Debug mode usings the javascript console.log function to output the POST / GET data for review
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        //###########################

        self::setDebugMode(false);

        //#### DEVELOPER NOTE #####
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        // The below section, when uncommented will enable a demo database recording function to be used for configuration.
        // Please note you will need to comment out the self::set_____ functions above to ensure that are not duplicated here.
        // In includes/helpers/dbexample.php you will need to add in your database details, there is a script avaialble in the file to allow to quickly create the demo tables
        // There are several lines that will need to be uncommented in this file to enable to the DB Example fully, all of the lines are suffixed with #DBExample to enable easy location
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        //###########################

        // DB\DBDemo::saveConfiguration('MerchantID', '**MERCHANTID**');#DBExample
        // DB\DBDemo::saveConfiguration('MerchantPassword', '**PASSWORD**');#DBExample
        // DB\DBDemo::saveConfiguration('PreSharedKey', '**PRESHAREDKEY**');#DBExample
        // DB\DBDemo::saveConfiguration('SecretKey', '**SECRETKEY**');#DBExample
        // DB\DBDemo::saveConfiguration('IntegrationType', IntegrationType::DIRECT);#DBExample
        // DB\DBDemo::saveConfiguration('HashMethod', Constants\HASH_METHOD::SHA1);#DBExample
        // DB\DBDemo::saveConfiguration('TransactionType', Constants\TRANSACTION_TYPE::SALE);#DBExample
        // DB\DBDemo::saveConfiguration('CurrencyCode', 'GBP');#DBExample
        // DB\DBDemo::saveConfiguration('HostedIframe', "true");#DBExample
        // DB\DBDemo::saveConfiguration('HostedCustomerDetails', "true");#DBExample
        // DB\DBDemo::saveConfiguration('PayzoneImages', "true");#DBExample
        // DB\DBDemo::saveConfiguration('OrderDetails', "true");#DBExample

        // Load the variables from the DB example, please note these can be hard coded / static if required, or accessed from a database etc
        // self::setMerchantId(DB\DBDemo::getConfiguration('MerchantID'));#DBExample
        // self::setMerchantPassword(DB\DBDemo::getConfiguration('MerchantPassword'));#DBExample
        // self::setPreSharedKey(DB\DBDemo::getConfiguration('PreSharedKey'));#DBExample
        // self::setSecretKey(DB\DBDemo::getConfiguration('SecretKey'));#DBExample
        // self::setIntegrationType(DB\DBDemo::getConfiguration('IntegrationType'));#DBExample
        // self::setHashMethod(DB\DBDemo::getConfiguration('HashMethod'));#DBExample
        // self::setTransactionType(DB\DBDemo::getConfiguration('TransactionType'));#DBExample
        // self::setResultDeliveryMethod(DB\DBDemo::getConfiguration('ResultMethod'));#DBExample
        // self::setCurrencyCode(DB\DBDemo::getConfiguration('CurrencyCode'));#DBExample
        // self::setHostedIframe(DB\DBDemo::getConfiguration('HostedIframe'));#DBExample
        // self::setHostedCustomerDetails(DB\DBDemo::getConfiguration('HostedCustomerDetails'));#DBExample
        // self::setPayzoneImages(DB\DBDemo::getConfiguration('PayzoneImages'));#DBExample
        // self::setOrderDetails(DB\DBDemo::getConfiguration('OrderDetails'));#DBExample

        //#### DEVELOPER NOTE #####
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        // The variables set below in the __construct() function allow configuration of the way the payment gateway operates, these fields can be hardcoded into the __constrcut function as below, or accessed dynamically from a DB etc to set the instance. These fields would be best set in your admin console / functions, stored in a database then retrieved from the below.
        //###########################
        //
        // Set the variables using a static method
        self::setMerchantId($config->getMerchantId()); // Enter the merchant ID from the MMS
        self::setMerchantPassword($config->getMerchantPassword()); // Enter the merchant Password from the MMS
        self::setPreSharedKey($config->getPreSharedKey()); // Enter the pre shared key from the MMS
        self::setSecretKey($config->getSecretKey()); // secret key used to protect and verify data
        self::setIntegrationType($config->getIntegrationType());
        self::setHashMethod($config->getHashMethod());
        self::setTransactionType($config->getTransactionType());
        self::setResultDeliveryMethod($config->getResultDeliveryMethod()); //Only Used for Hosted Payment Form
        self::setCurrencyCode('GBP');
        self::setHostedIframe($config->getHostedIframe());
        self::setHostedCustomerDetails($config->getHostedCustomerDetails());
        self::setPayzoneImages($config->getPayzoneImages());
        self::setOrderDetails($config->getOrderDetails());

        // Set the URLS to be used for passing the information back and forth between the site
        self::setURL('home-page', 'index.php'); //Home page, assigns the base URL to the start of the url
        self::setURL('cart-page', 'cart.php'); //Cart page, assigns the base URL to the start of the url
        self::setURL('payment-page', 'payment.php'); //Payment page, handles the logic of the payment type, and redirects to the relevant payment processing function
        self::setURL('process-payment', 'payment/process'); //processes the payment as required
        self::setURL('process-refund', 'process-refund.php'); //processes the payment as required
        self::setURL('result-page', 'results.php'); // validates and presents the results
        self::setURL('loading-page', 'assets/loading.html'); // Loading page
        self::setURL('form-action-payment'); // no variable needed, for hosted this sets the page to the hosted form payment handler (MMS) and for other integrations it changes the the form action to self so the content will be posted back to the same page
        self::setURL('response-form-handler'); // no variable needed, this accesses the form handler in the MMS
    }

    public function setDebugMode($val)
    {
        $this->debug_mode = $val;
    }

    public function getDebugMode()
    {
        return $this->debug_mode;
    }

    public function setHostedIframe($val)
    {
        $this->hosted_iframe = $val;
    }

    public function getHostedIframe()
    {
        return $this->hosted_iframe;
    }

    public function setHostedCustomerDetails($val)
    {
        $this->hosted_cust_details = $val;
    }

    public function getHostedCustomerDetails()
    {
        return $this->hosted_cust_details;
    }

    public function setMerchantId($val)
    {
        $this->merchant_id = $val;
    }

    public function getMerchantId()
    {
        return $this->merchant_id;
    }

    public function setMerchantPassword($val)
    {
        $this->merchant_password = $val;
    }

    public function getMerchantPassword()
    {
        return $this->merchant_password;
    }

    public function setPreSharedKey($val)
    {
        $this->pre_shared_key = $val;
    }

    public function getPreSharedKey()
    {
        return $this->pre_shared_key;
    }

    public function setSecretKey($val)
    {
        $this->secret_key = $val;
    }

    public function getSecretKey()
    {
        return $this->secret_key;
    }

    public function setIntegrationType($val)
    {
        $this->integration_type = $val;
    }

    public function getIntegrationType()
    {
        return $this->integration_type;
    }

    public function getIntegrationType2()
    {
        if (IntegrationType::HOSTED == $this->integration_type) {
            return $this->integration_type.' - '.$this->result_method;
        } else {
            return $this->integration_type;
        }
    }

    public function setHashMethod($val)
    {
        $this->hash_method = $val;
    }

    public function getHashMethod()
    {
        return $this->hash_method;
    }

    public function setResultDeliveryMethod($val)
    {
        $this->result_method = $val;
    }

    public function getResultDeliveryMethod()
    {
        return $this->result_method;
    }

    public function setTransactionType($val)
    {
        $this->transaction_type = $val;
    }

    public function getTransactionType()
    {
        return $this->transaction_type;
    }

    public function setCurrencyCode($val)
    {
        $this->currency_code = $val;
    }

    public function getCurrencyCode()
    {
        return $this->currency_code;
    }

    public function setPayzoneImages($val)
    {
        $this->payzone_images = $val;
    }

    public function getPayzoneImages()
    {
        return $this->payzone_images;
    }

    public function setOrderDetails($val)
    {
        $this->order_details = $val;
    }

    public function getOrderDetails()
    {
        return $this->order_details;
    }

    public function versionCheck()
    {
        $plugin_version = $this->plugin_version;
        $url = "https://payzone-modules.co.uk/api/api.php?action=version_check&module=custom-module-direct&version=$plugin_version&key=8U2egXStxFiNA1YnFrfu9MN1DU1x1YO5P3qT3exC";
        $options = [
            CURLOPT_RETURNTRANSFER => true, // return web page
            CURLOPT_HEADER => false, // don't return headers
            CURLOPT_FOLLOWLOCATION => true, // follow redirects
            CURLOPT_MAXREDIRS => 10, // stop after 10 redirects
            CURLOPT_ENCODING => '', // handle compressed
            CURLOPT_USERAGENT => 'Payzone Gateway', // name of client
            CURLOPT_AUTOREFERER => true, // set referrer on redirect
            CURLOPT_CONNECTTIMEOUT => 120, // time-out on connect
            CURLOPT_TIMEOUT => 120, // time-out on response
        ];
        $ch = curl_init($url);
        curl_setopt_array($ch, $options);
        $content = curl_exec($ch);
        curl_close($ch);

        $jsonresp = json_decode($content);
        $responsemsg =
            '<h2 style="margin:5px 0;">Payzone Payment Gateway</h2><p>'.
            $jsonresp->response.
            '- Latest version v'.
            $jsonresp->latest_version.
            ' | Installed version v'.
            $plugin_version.
            '</p>';
        $responsemsg2 =
            '<p>Please get in touch at <a href="mailto:online@payzone.co.uk">online@payzone.co.uk</a> to receive the latest module</p>';
        switch ($jsonresp->code) {
            case '4': //latest version
            case '10': //repeat check
                $responsemsg =
                    '<h2 style="margin:5px 0;">Payzone Payment Gateway</h2><p>Latest version v'.
                    $jsonresp->latest_version.
                    '</p>';
                $class = 'payzone-version-info';
                $showmsg = false;
                break;
            case '0': //repeat check
            case '3': //patch available
            case '2': //minor patch available
                $class = 'payzone-version-warning';
                $showmsg = true;
                $responsemsg .= $responsemsg2;

                if ($jsonresp->latest_version == $plugin_version) {
                    $showmsg = false;
                }
                break;
            case '1': //major update available
                $responsemsg .= $responsemsg2;
                $class = 'payzone-version-error';
                $showmsg = true;
                break;
            default:
                // unknown version
                $class = 'payzone-version-error';
                $responsemsg = 'Unknown Version Installed.<br>';
                $responsemsg .= $responsemsg2;
                $showmsg = true;
                break;
        }
        $return = '';
        if ($showmsg) {
            $return = "<div class='payzone-alert $class'>$responsemsg</div>";
        }

        return $return;
    }

    public function setURL($act, $val = null)
    {
        //#### DEVELOPER NOTE #####
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        // If you change the overall file structure of the payment module then you will need to amend the below functions to return the correct URLs as required. If you are nesting or including the content it may also be required to change the PayzoneHelper::getSiteSecureURL() function.
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        //###########################
        switch ($act) {
            case 'home-page':
                $this->home_page =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'cart-page':
                $this->cart_page =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'payment-page':
                $this->form_action_cart =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'loading-page':
                $this->loading_page =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'process-payment':
                $this->process_url =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'process-refund':
                $this->process_refund_url =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'result-page':
                $this->result_page =
                    PayzoneHelper::getSiteSecureURL('base').$val;
                break;
            case 'form-action-payment':
                switch ($this->integration_type) {
                    case IntegrationType::HOSTED:
                        $this->form_action_payment =
                            'https://mms.payzoneonlinepayments.com/Pages/PublicPages/PaymentForm.aspx';

                        break;
                    case IntegrationType::DIRECT:
                        $this->form_action_payment = '#';
                        break;
                    case IntegrationType::TRANSPARENT:
                        $this->form_action_payment =
                            'https://mms.payzoneonlinepayments.com/Pages/PublicPages/TransparentRedirect.aspx';
                        break;
                }
                break;
            case 'response-form-handler':
                $this->paymentformresulturl =
                    'https://mms.payzoneonlinepayments.com/Pages/PublicPages/PaymentFormResultHandler.ashx';
                break;
        }
    }

    public function getURL($act)
    {
        switch ($act) {
            case 'home-page':
                return $this->home_page;
                break;
            case 'cart-page':
                return $this->cart_page;
                break;
            case 'payment-page':
                return $this->form_action_cart;
                break;
            case 'loading-page':
                return $this->loading_page;
                break;
            case 'process-payment':
                return $this->process_url;
                break;
            case 'process-refund':
                return $this->process_refund_url;
                break;
            case 'result-page':
                return $this->result_page;
                break;
            case 'form-action-payment':
                return $this->form_action_payment;
                break;
            case 'response-form-handler':
                return $this->paymentformresulturl;
                break;
        }
    }

    /**
     * [buildFormRequest parse and process response fields and format into array to be passed ot the form generation field].
     *
     * @method buildFormRequest
     *
     * @param  [Array]           [$_POST objects are posted to form page]
     *
     * @return [String] [Array passed into Generate Form Function in Return ]
     */
    public function buildFormRequest()
    {
        if (!$this->paymentData->getOrderId()) {
            // Validate information that has been passed across (via $_POST or $_GET) and process the information ready for the next stage of the payment process, including setting all of the variables for the payment handling with the system
        }

        $params = [];
        $Country = $this->paymentData->getCountry() ?: false;
        $CountryCode = $Country ? PayzoneHelper::getCountryCode($Country) : '';
        $ISOCurrencyCode = PayzoneHelper::getISOCode($this->currency_code);
        $FullAmount = $this->paymentData->getFullAmount();
        $Amount = PayzoneHelper::getMinorCurrencyAmount(
            $ISOCurrencyCode,
            $FullAmount
        );
        $OrderID = $this->paymentData->getOrderId();
        $TransactionDateTime = $this->paymentData->getTransactionDateTime();
        $OrderDescription = $this->paymentData->getOrderDescription();
        $EchoThreeDSecureAuthenticationCheckResult = PayzoneHelper::boolToString(
            true
        );
        $EchoCardType = PayzoneHelper::boolToString(true);
        $EchoAVSCheckResult = PayzoneHelper::boolToString(true);
        $EchoCV2CheckResult = PayzoneHelper::boolToString(true);
        $CustomerName = $this->paymentData->getCustomerName() ?: '';

        $Address1 = $this->paymentData->getAddress1() ?: '';
        $Address2 = $this->paymentData->getAddress2() ?: '';
        $Address3 = $this->paymentData->getAddress3() ?: '';
        $Address4 = $this->paymentData->getAddress4() ?: '';
        $City = $this->paymentData->getCity() ?: '';
        $State = $this->paymentData->getState() ?: '';
        $PostCode = $this->paymentData->getPostCode() ?: '';
        $EmailAddress = $this->paymentData->getEmailAddress() ?: '';
        $CV2Mandatory = PayzoneHelper::boolToString(true);
        $Address1Mandatory = PayzoneHelper::boolToString(true);
        $CityMandatory = PayzoneHelper::boolToString(true);
        $PostCodeMandatory = PayzoneHelper::boolToString(true);
        $StateMandatory = PayzoneHelper::boolToString(true);
        $CountryMandatory = PayzoneHelper::boolToString(true);
        $ResultDeliveryMethod = $this->result_method;
        $ServerResultURL = '';
        $PaymentFormDisplaysResult = PayzoneHelper::boolToString(false);

        $params['MerchantID'] = $this->merchant_id;
        $params['Amount'] = $Amount;
        $params['FullAmount'] = $FullAmount;
        $params['CurrencyCode'] = $ISOCurrencyCode;
        $params['OrderID'] = $OrderID;
        $params['TransactionType'] = $this->transaction_type;
        $params['TransactionDateTime'] = $TransactionDateTime;
        $params['OrderDescription'] = $OrderDescription;
        $params['CustomerName'] = $CustomerName;
        $params['Address1'] = $Address1;
        $params['Address2'] = $Address2;
        $params['Address3'] = $Address3;
        $params['Address4'] = $Address4;
        $params['City'] = $City;
        $params['State'] = $State;
        $params['PostCode'] = $PostCode;
        $params['CountryCode'] = $CountryCode;
        $params['HashMethod'] = $this->hash_method;
        $params['EmailAddress'] = $EmailAddress;

        switch ($this->integration_type) {
            case IntegrationType::HOSTED:
                $params['CallbackURL'] = $this->result_page;
                $params['EchoAVSCheckResult'] = $EchoAVSCheckResult;
                $params['EchoCV2CheckResult'] = $EchoCV2CheckResult;
                $params[
                    'EchoThreeDSecureAuthenticationCheckResult'
                ] = $EchoThreeDSecureAuthenticationCheckResult;
                $params['EchoCardType'] = $EchoCardType;
                $params['CV2Mandatory'] = $CV2Mandatory;
                $params['Address1Mandatory'] = $Address1Mandatory;
                $params['CityMandatory'] = $CityMandatory;
                $params['PostCodeMandatory'] = $PostCodeMandatory;
                $params['StateMandatory'] = $StateMandatory;
                $params['CountryMandatory'] = $CountryMandatory;
                $params['ResultDeliveryMethod'] = $ResultDeliveryMethod;
                $params['ServerResultURL'] = $ServerResultURL;
                $params[
                    'PaymentFormDisplaysResult'
                ] = $PaymentFormDisplaysResult;
                $params['ServerResultURLCookieVariables'] = '';
                $params['ServerResultURLFormVariables'] = '';
                $params['ServerResultURLQueryStringVariables'] = '';
                $StringToHash = PayzoneHelper::generateStringToHashHosted(
                    $this->merchant_id,
                    $this->merchant_password,
                    $Amount,
                    $ISOCurrencyCode,
                    $EchoAVSCheckResult,
                    $EchoCV2CheckResult,
                    $EchoThreeDSecureAuthenticationCheckResult,
                    $EchoCardType,
                    $OrderID,
                    $this->transaction_type,
                    $TransactionDateTime,
                    $this->result_page,
                    $OrderDescription,
                    $CustomerName,
                    $Address1,
                    $Address2,
                    $Address3,
                    $Address4,
                    $City,
                    $State,
                    $PostCode,
                    $CountryCode,
                    $CV2Mandatory,
                    $Address1Mandatory,
                    $CityMandatory,
                    $PostCodeMandatory,
                    $StateMandatory,
                    $CountryMandatory,
                    $ResultDeliveryMethod,
                    $ServerResultURL,
                    $PaymentFormDisplaysResult,
                    $this->pre_shared_key,
                    $this->hash_method
                );
                $HashDigest = PayzoneHelper::calculateHashDigest(
                    $StringToHash,
                    $this->pre_shared_key,
                    $this->hash_method
                ); // Generate the Hosted Payment Form Hash string and Hash Digest for server validation
                break;
            case IntegrationType::DIRECT:
                $params['CallbackURL'] = $this->result_page;
                $StringToHash = PayzoneHelper::generateStringToHashDirect(
                    $Amount,
                    $ISOCurrencyCode,
                    $OrderID,
                    $OrderDescription,
                    $this->secret_key
                );
                $HashDigest = PayzoneHelper::calculateHashDigest(
                    $StringToHash,
                    $this->secret_key,
                    $this->hash_method
                ); // Generate the Hosted Payment Form Hash string and Hash Digest for server validation
                break;
            case IntegrationType::TRANSPARENT:
                $params['CallbackURL'] = $this->result_page;
                $StringToHash = PayzoneHelper::generateStringToHashTransparentInitial(
                    $this->hash_method,
                    $this->pre_shared_key,
                    $this->merchant_id,
                    $this->merchant_password,
                    $Amount,
                    $ISOCurrencyCode,
                    $OrderID,
                    $this->transaction_type,
                    $TransactionDateTime,
                    $params['CallbackURL'],
                    $OrderDescription
                ); // Generate the Hosted Payment Form Hash string and Hash Digest for server validation
                $HashDigest = PayzoneHelper::calculateHashDigest(
                    $StringToHash,
                    $this->secret_key,
                    $this->hash_method
                );
                break;
        }
        $params['HashDigest'] = $HashDigest;

        return self::generateForm($params); //pass the array over to the form generator to return
    }

    /**
     * [buildFormRequest parse and process response fields and format into array to be passed ot the form generation field].
     *
     * @method buildFormRequest
     *
     * @param  [Array]           [$_POST objects are posted to form page]
     *
     * @return [String] [Array passed into Generate Form Function in Return ]
     */
    public function buildRefundRequest()
    {
        if (!$this->paymentData->getOrderId()) {
            // Validate information that has been passed across (via $_POST or $_GET) and process the information ready for the next stage of the payment process, including setting all of the variables for the payment handling with the system
        }

        $params = [];
        $Country = $this->paymentData->getCountry() ?: false;
        $CountryCode = $Country ? PayzoneHelper::getCountryCode($Country) : '';
        $ISOCurrencyCode = PayzoneHelper::getISOCode($this->currency_code);
        $FullAmount = $this->paymentData->getFullAmount();
        $Amount = PayzoneHelper::getMinorCurrencyAmount(
            $ISOCurrencyCode,
            $FullAmount
        );
        $OrderID = $this->paymentData->getOrderId();
        $TransactionDateTime = $this->paymentData->getTransactionDateTime();
        $OrderDescription = $this->paymentData->getOrderDescription();
        $EchoThreeDSecureAuthenticationCheckResult = PayzoneHelper::boolToString(
            true
        );
        $EchoCardType = PayzoneHelper::boolToString(true);
        $EchoAVSCheckResult = PayzoneHelper::boolToString(true);
        $EchoCV2CheckResult = PayzoneHelper::boolToString(true);

        $CustomerName = $this->paymentData->getCustomerName() ?: '';

        $Address1 = $this->paymentData->getAddress1() ?: '';
        $Address2 = $this->paymentData->getAddress2() ?: '';
        $Address3 = $this->paymentData->getAddress3() ?: '';
        $Address4 = $this->paymentData->getAddress4() ?: '';
        $City = $this->paymentData->getCity() ?: '';
        $State = $this->paymentData->getState() ?: '';
        $PostCode = $this->paymentData->getPostCode() ?: '';
        $EmailAddress = $this->paymentData->getEmailAddress() ?: '';

        $CV2Mandatory = PayzoneHelper::boolToString(true);
        $Address1Mandatory = PayzoneHelper::boolToString(true);
        $CityMandatory = PayzoneHelper::boolToString(true);
        $PostCodeMandatory = PayzoneHelper::boolToString(true);
        $StateMandatory = PayzoneHelper::boolToString(true);
        $CountryMandatory = PayzoneHelper::boolToString(true);
        $ResultDeliveryMethod = $this->result_method;
        $ServerResultURL = '';
        $PaymentFormDisplaysResult = PayzoneHelper::boolToString(false);

        $params['MerchantID'] = $this->merchant_id;
        $params['Amount'] = $Amount;
        $params['CurrencyCode'] = $ISOCurrencyCode;
        $params['TransactionType'] = $this->transaction_type;
        $params['TransactionDateTime'] = $TransactionDateTime;
        $params['OrderDescription'] = $OrderDescription;
        $params['CustomerName'] = $CustomerName;
        $params['Address1'] = $Address1;
        $params['Address2'] = $Address2;
        $params['Address3'] = $Address3;
        $params['Address4'] = $Address4;
        $params['City'] = $City;
        $params['State'] = $State;
        $params['PostCode'] = $PostCode;
        $params['CountryCode'] = $CountryCode;
        $params['HashMethod'] = $this->hash_method;
        $params['EmailAddress'] = $EmailAddress;

        $params['CallbackURL'] = $this->result_page.'?refund';
        $StringToHash = PayzoneHelper::generateStringToHashDirect(
            $Amount,
            $ISOCurrencyCode,
            $OrderID,
            $OrderDescription,
            $this->secret_key
        );
        $HashDigest = PayzoneHelper::calculateHashDigest(
            $StringToHash,
            $this->secret_key,
            $this->hash_method
        ); // Generate the Hosted Payment Form Hash string and Hash Digest for server validation
        $params['HashDigest'] = $HashDigest;

        return self::generateForm($params); //pass the array over to the form generator to return
    }

    /**
     * [generateForm Loops through passed array and generates HTML string of form.].
     *
     * @method generateForm
     *
     * @param [Array] $params
     *
     * @return [String] [Output string for HTML form to be added to paypage to process nex step]
     */
    public function generateForm($params)
    {
        $type = $this->debug_mode ? '' : 'hidden';
        $output = '';
        foreach ($params as $name => $value) {
            $output .= "<input type='$type' name='$name' value='$value'/>";
        }
        $output .=
            $this->debug_mode &&
            IntegrationType::DIRECT != $this->integration_type
                ? "<input type='submit' name='debug_submit' value='submit'/>"
                : '';

        return $output; // Return the form.
    }

    public function buildXHRefund()
    {
        if (!$this->paymentData->getOrderId()) {
            //Validate information that has been passed across (via $_POST or $_GET) and process the information ready for the next stage of the payment process, including setting all of the variables for the payment handling with the system
        }
        $params = [];
        $Country = $this->paymentData->getCountry() ?: false;
        $CountryCode = $Country ? PayzoneHelper::getCountryCode($Country) : '';
        $ISOCurrencyCode = PayzoneHelper::getISOCode($this->currency_code);
        $FullAmount = $_GET['pzgamt'];
        $Amount = PayzoneHelper::getMinorCurrencyAmount(
            $ISOCurrencyCode,
            $FullAmount
        );
        $OrderID = $_GET['pzgorderid'];

        $CrossReferenceTransaction = $_GET['pzgcrossref'];

        $params['MerchantID'] = $this->merchant_id;
        $params['Amount'] = $Amount;
        $params['FullAmount'] = $FullAmount;
        $params['CurrencyCode'] = $ISOCurrencyCode;
        $params['OrderID'] = $OrderID;
        $params['TransactionType'] = 'REFUND';
        $params['CrossReference'] = $CrossReferenceTransaction;

        return $params; //pass the array over to the form generator to return
    }

    public function buildXHRequest()
    {
        if (!$this->paymentData->getOrderId()) {
            //Validate information that has been passed across (via $_POST or $_GET) and process the information ready for the next stage of the payment process, including setting all of the variables for the payment handling with the system
        }
        $params = [];
        $Country = $this->paymentData->getCountry() ?: false;
        $CountryCode = $Country ? PayzoneHelper::getCountryCode($Country) : '';
        $ISOCurrencyCode = PayzoneHelper::getISOCode($this->currency_code);
        $FullAmount = $this->paymentData->getFullAmount();
        $Amount = PayzoneHelper::getMinorCurrencyAmount(
            $ISOCurrencyCode,
            $FullAmount
        );
        $OrderID = $this->paymentData->getOrderId();
        $TransactionDateTime = $this->paymentData->getTransactionDateTime();
        $OrderDescription = $this->paymentData->getOrderDescription();
        $EchoThreeDSecureAuthenticationCheckResult = PayzoneHelper::boolToString(
            true
        );
        $EchoCardType = PayzoneHelper::boolToString(true);
        $EchoAVSCheckResult = PayzoneHelper::boolToString(true);
        $EchoCV2CheckResult = PayzoneHelper::boolToString(true);
        $CardNumber = $this->paymentData->getCardNumber() ?: '';
        $CV2 = $this->paymentData->getCV2() ?: '';
        $IssueNumber = $this->paymentData->getIssueNumber() ?: '';
        $ExpiryDateMonth = $this->paymentData->getExpiryDateMonth() ?: '';
        $ExpiryDateYear = $this->paymentData->getExpiryDateYear() ?: '';

        $StartDateMonth = $this->paymentData->getStartDateMonth() ?: '';
        $StartDateYear = $this->paymentData->getStartDateYear() ?: '';

        $CustomerName = $this->paymentData->getCustomerName() ?: '';

        $Address1 = $this->paymentData->getAddress1() ?: '';
        $Address2 = $this->paymentData->getAddress2() ?: '';
        $Address3 = $this->paymentData->getAddress3() ?: '';
        $Address4 = $this->paymentData->getAddress4() ?: '';
        $City = $this->paymentData->getCity() ?: '';
        $State = $this->paymentData->getState() ?: '';
        $PostCode = $this->paymentData->getPostCode() ?: '';
        $EmailAddress = $this->paymentData->getEmailAddress() ?: '';
        $CrossReferenceTransaction = false;
        $CrossReferenceTransactionID = false;
        if ($this->paymentData->getCrossReferenceTransaction()) {
            if ('false' != $this->paymentData->getCrossReferenceTransaction()) {
                $CrossReferenceTransaction = true;
                $CrossReferenceTransactionID = $this->paymentData->getCrossReference();
            }
        }

        // Generate parameters for form submission
        $params['MerchantID'] = $this->merchant_id;
        $params['EchoAVSCheckResult'] = $EchoAVSCheckResult;
        $params['EchoCV2CheckResult'] = $EchoCV2CheckResult;
        $params['EchoCardType'] = $EchoCardType;
        $params['Amount'] = $Amount;
        $params['FullAmount'] = $FullAmount;
        $params['CurrencyCode'] = $ISOCurrencyCode;
        $params['OrderID'] = $OrderID;
        $params['TransactionType'] = $this->transaction_type;
        $params['TransactionDateTime'] = $TransactionDateTime;
        $params['OrderDescription'] = $OrderDescription;
        $params['CardNumber'] = $CardNumber;
        $params['CV2'] = $CV2;
        $params['IssueNumber'] = $IssueNumber;
        $params['ExpiryDateMonth'] = $ExpiryDateMonth;
        $params['ExpiryDateYear'] = $ExpiryDateYear;
        $params['StartDateMonth'] = $StartDateMonth;
        $params['StartDateYear'] = $StartDateYear;
        $params['CustomerName'] = $CustomerName;
        $params['Address1'] = $Address1;
        $params['Address2'] = $Address2;
        $params['Address3'] = $Address3;
        $params['Address4'] = $Address4;
        $params['City'] = $City;
        $params['State'] = $State;
        $params['PostCode'] = $PostCode;
        $params['EmailAddress'] = $EmailAddress;
        $params['CountryCode'] = $CountryCode;
        $params['CrossReferenceTransaction'] = $CrossReferenceTransaction;
        $params['CrossReferenceTransactionID'] = $CrossReferenceTransactionID;

        return $params; //pass the array over to the form generator to return
    }

    /* ############################################## */
    /* Response validation and  Handling */
    /* ############################################## */

    /**
     * [recordTransaction description].
     *
     * @method recordTransaction
     *
     * @param string $order_id
     * @param string $amounttidy
     * @param int    $amountminor
     * @param float  $amountmajor
     * @param int    $currency_code
     * @param string $crossreference
     * @param string $statuscode
     * @param string $type
     * @param string $transactiondatetime
     * @param string $message
     *
     * @return bool //complete or failed
     */
    public function recordTransaction(
        $order_id,
        $amounttidy,
        $amountminor,
        $amountmajor,
        $currency_code,
        $crossreference,
        $statuscode,
        $type,
        $transactiondatetime,
        $message
    ) {
        //#### DEVELOPER NOTE #####
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        // This section is called from the transaction complete functions and is a location for you to include any transaction logging / recording or other funcationality.
        // A demo version is included for reference and needs to be uncommented to test if required. Futher details are included in the __construct function comments
        // A warning message will be presented to all users whilst a transaction is not being recorded, to suppress this message change $recordTransaction to true;
        // WHen creating your own funtion to record the transaction, ensure that the function returns true if the record has been saved, and false on any error.
        //~~~~~~~~~~~~~~~~~~~~~~~~~~#
        //###########################

        $recordTransaction = true;
        //$recordTransaction = DB\DBDemo::saveTransaction($order_id, $amounttidy, $amountminor, $amountmajor, $currency_code, $crossreference, $statuscode, $type, $transactiondatetime, $message, $this->getIntegrationType2());#DBExample
        if ($recordTransaction) {
            $date = strtotime($transactiondatetime);
            $transactionLog = new TransactionLog();
            $transactionLog->setOrderId($order_id);
            $transactionLog->setAmount($amounttidy);
            $transactionLog->setAmount($amountminor);
            $transactionLog->setAmountMajor($amountmajor);
            $transactionLog->setCurrency($currency_code);
            $transactionLog->setCrossReference($crossreference);
            $transactionLog->setStatusCode($statuscode);
            $transactionLog->setType($type);
            //$transactionLog->setTransactionDatetime($date);
            $transactionLog->setTransactionDatetimeText($transactiondatetime);
            $transactionLog->setGatewayMessage($message);
            $this->em->persist($transactionLog);
            $this->em->flush();
        } else {
            $transMessage =
                ''.
                "<div class='payzone-transaction-results payzone-warning'>".
                "<div class='payzone-results-section'>".
                "<p>Warning, transaction has not been saved. Please contact the website owner quoting Order ID - $order_id & reference code $crossreference</p>".
                '<p>DEVELOPER NOTE - when integrating if not saving this to custom DB, set the $recordTransaction variable to true to override the save check.</p>'.
                '</div>'.
                '</div>';
            echo $transMessage; //Action to complete if transaction has been not been recorded correctly or the record transaction recorded an error recorded...
        }
    }

    /**
     * [validateResponse3DTransparent validate the transaction for 3D Secure Transparent Redirect and ensure data matches hash].
     *
     * @method validateResponse3DTransparent
     *
     * @param [Array] $post
     *
     * @return [Boolean] [True if validated, false if error occured]
     */
    public function validateResponse3DTransparent($post)
    {
        $validated = PayzoneHelper::get3DSecureAuthenticationRequiredFromPostVariables(
            $post,
            $trTransactionResult
        );

        return $validated;
    }

    /**
     * [validateResponse3DTransparent Hash Digest for Transparent Redirect 3D Secure Response for use in validation].
     *
     * @method validateResponse3DTransparent
     *
     * @param [Array] $post
     *
     * @return [String] [Hash Digest for Transparent Redirect 3D Secure Response]
     */
    public function validateResponse3DTransparentResponse($post)
    {
        $TransactionDateTime = date('Y-m-d H:i:s P'); //timestamp at time of validation instead of time of transaction
        $CallbackURL = $this->result_page;
        $StringToHash = PayzoneHelper::generateStringToHash3DSecurePostAuthentication(
            $this->hash_method,
            $this->pre_shared_key,
            $this->merchant_id,
            $this->merchant_password,
            $post['MD'],
            $TransactionDateTime,
            $CallbackURL,
            $post['PaRes']
        );
        $HashDigest = PayzoneHelper::calculateHashDigest(
            $StringToHash,
            $this->pre_shared_key,
            $this->hash_method
        );

        return $HashDigest;
    }

    /**
     * [validateResponse Response handler for transaction, receives results and processes all results, passes through to validation responses and passed a return array back formatted with content ].
     *
     * @method validateResponse
     *
     * @param [Array] $get   - $_GET array
     * @param [Array] $post- $_POST array
     *
     * @return [Array] [Response objct populated with outcome of transaction]
     */
    public function clean_input($value)
    {
        return strip_tags($value, '<p>'); // allow p tags
    }

    public function validateResponse($get, $post)
    {
        $errormessages = isset($post['ErrorMessages'])
            ? $post['ErrorMessages']
            : '';

        $post = array_map('strip_tags', $post);
        $get = array_map('strip_tags', $get);
        $refund = isset($get['refund']) ? true : false;

        if ($refund) {
            $returnarray['Notification']['Refund'] = 'Refund';
            $returnarray['Notification']['Type'] = $this->responseCodetoOutcome(
                $post['StatusCode'],
                'Type'
            );
            $returnarray['Notification'][
                'Title'
            ] = $this->responseCodetoOutcome($post['StatusCode'], 'Title-R');
            $returnarray['Notification'][
                'Message'
            ] = $this->responseCodetoOutcome($post['StatusCode'], 'Message-R');
            $returnarray['Notification']['Class'] = $this->responseCodetoCss(
                $post['StatusCode']
            );
            $returnarray['Order']['OrderID'] = $post['OrderID'];
            $returnarray['Order']['Amount'] = $post['Amount'];
            $returnarray['Order']['CurrencyCode'] = $post['CurrencyCode'];
            $returnarray['Order']['TransactionType'] = $this->transaction_type;
            $returnarray['Order']['TransactionDateTime'] =
                $post['TransactionDateTime'];
            $returnarray['Order']['HashDigest'] = $post['HashDigest'];
            $returnarray['Response']['CrossReference'] =
                $post['CrossReference'];
            $returnarray['Response']['StatusCode'] = $post['StatusCode'];
            $returnarray['Response']['Message'] = $post['Message'];
            $returnarray['Response']['ErrorMessages'] = $errormessages;
            $returnarray['Response']['PreviousResponse'][
                'PreviousMessage'
            ] = isset($post['PreviousTransactionMessage'])
                ? $post['PreviousTransactionMessage']
                : '';
            $this->recordTransaction(
                $returnarray['Order']['OrderID'],
                $returnarray['Order']['Amount'],
                $returnarray['Order']['AmountMinor'],
                $returnarray['Order']['AmountMajor'],
                $returnarray['Order']['CurrencyCode'],
                $returnarray['Response']['CrossReference'],
                $returnarray['Response']['StatusCode'],
                'Refund - '.
                    $this->responseCodetoOutcome(
                        $returnarray['Response']['StatusCode'],
                        'Type'
                    ),
                $returnarray['Order']['TransactionDateTime'],
                $returnarray['Response']['Message']
            );
        } else {
            switch ($this->integration_type) {
                case IntegrationType::HOSTED:
                    switch ($this->result_method) {
                        case ResultDeliveryMethod::POST:
                            if (isset($post['CrossReference'])) {
                                $validated = PayzoneHelper::validateTransactionResultHostedPost(
                                    $this->merchant_id,
                                    $this->merchant_password,
                                    $this->pre_shared_key,
                                    $this->hash_method,
                                    $post,
                                    $trTransactionResult,
                                    $ValidateErrorMessage
                                );
                                if ($validated) {
                                    $returnarray['Notification'][
                                        'Type'
                                    ] = $this->responseCodetoOutcome(
                                        $post['StatusCode'],
                                        'Type'
                                    );
                                    $returnarray['Notification'][
                                        'Title'
                                    ] = $this->responseCodetoOutcome(
                                        $post['StatusCode'],
                                        'Title'
                                    );
                                    $returnarray['Notification'][
                                        'Message'
                                    ] = $this->responseCodetoOutcome(
                                        $post['StatusCode'],
                                        'Message'
                                    );
                                    $returnarray['Notification'][
                                        'Class'
                                    ] = $this->responseCodetoCss(
                                        $post['StatusCode']
                                    );
                                    $returnarray['Order']['OrderID'] =
                                        $post['OrderID'];
                                    $returnarray['Order']['OrderDescription'] =
                                        $post['OrderDescription'];
                                    $returnarray['Order']['AmountMinor'] =
                                        $post['Amount'];
                                    $returnarray['Order'][
                                        'AmountMajor'
                                    ] = PayzoneHelper::getMajorAmount(
                                        $post['CurrencyCode'],
                                        $post['Amount']
                                    );
                                    $returnarray['Order'][
                                        'Amount'
                                    ] = PayzoneHelper::getFormattededCurrencyAmount(
                                        $post['CurrencyCode'],
                                        $post['Amount']
                                    );
                                    $returnarray['Order']['CurrencyCode'] =
                                        $post['CurrencyCode'];
                                    $returnarray['Order']['TransactionType'] =
                                        $this->transaction_type;
                                    $returnarray['Order'][
                                        'TransactionDateTime'
                                    ] = $post['TransactionDateTime'];
                                    $returnarray['Order']['HashDigest'] =
                                        $post['HashDigest'];
                                    $returnarray['Response']['CrossReference'] =
                                        $post['CrossReference'];
                                    $returnarray['Response']['StatusCode'] =
                                        $post['StatusCode'];
                                    $returnarray['Response']['Message'] =
                                        $post['Message'];
                                    $returnarray['Response'][
                                        'PreviousResponse'
                                    ]['PreviousStatusCode'] =
                                        $post['PreviousStatusCode'];
                                    $returnarray['Response'][
                                        'PreviousResponse'
                                    ]['PreviousMessage'] =
                                        $post['PreviousMessage'];
                                    $returnarray['Response']['Checks'][
                                        'AddressNumericCheckResult'
                                    ] = $post['AddressNumericCheckResult'];
                                    $returnarray['Response']['Checks'][
                                        'PostCodeCheckResult'
                                    ] = $post['PostCodeCheckResult'];
                                    $returnarray['Response']['Checks'][
                                        'CV2CheckResult'
                                    ] = $post['CV2CheckResult'];
                                    $returnarray['Response']['Checks'][
                                        'ThreeDSecureAuthenticationCheckResult'
                                    ] =
                                        $post[
                                            'ThreeDSecureAuthenticationCheckResult'
                                        ];
                                    $this->recordTransaction(
                                        $returnarray['Order']['OrderID'],
                                        $returnarray['Order']['Amount'],
                                        $returnarray['Order']['AmountMinor'],
                                        $returnarray['Order']['AmountMajor'],
                                        $returnarray['Order']['CurrencyCode'],
                                        $returnarray['Response'][
                                            'CrossReference'
                                        ],
                                        $returnarray['Response']['StatusCode'],
                                        $this->responseCodetoOutcome(
                                            $returnarray['Response'][
                                                'StatusCode'
                                            ],
                                            'Type'
                                        ),
                                        $returnarray['Order'][
                                            'TransactionDateTime'
                                        ],
                                        $returnarray['Response']['Message']
                                    );
                                } else {
                                    $returnarray['Notification']['Type'] =
                                        PayzoneResponseOutcomes::ERROR;
                                    $returnarray['Notification']['Title'] =
                                        'Problem processing transaction';
                                    $returnarray['Notification']['Message'] =
                                        'Unable to process transaction response, transaction hash validation failed.';
                                    $returnarray['Notification']['Class'] =
                                        PayzoneResponseCss::ERROR;
                                }
                            } else {
                                $returnarray['Notification']['Type'] =
                                    PayzoneResponseOutcomes::ERROR;
                                $returnarray['Notification']['Title'] =
                                    'Problem processing transaction';
                                $returnarray['Notification']['Message'] =
                                    'Unable to process transaction response, payment variables not sent from payment handler.';
                                $returnarray['Notification']['Message'] = isset(
                                    $post['ErrorMessages']
                                )
                                    ? $returnarray['Notification']['Message'].
                                        " \n ".
                                        $post['ErrorMessages']
                                    : $returnarray['Notification']['Message'];
                                $returnarray['Notification']['Class'] =
                                    PayzoneResponseCss::ERROR;
                            }
                            break;
                        case ResultDeliveryMethod::SERVER_PULL:
                            if (isset($get['CrossReference'])) {
                                $validated = PayzoneHelper::validateTransactionResultHostedServerPull(
                                    $this->merchant_id,
                                    $this->merchant_password,
                                    $this->pre_shared_key,
                                    $this->hash_method,
                                    $get,
                                    $this->paymentformresulturl,
                                    $trTransactionResult,
                                    $ValidateErrorMessage
                                );
                                if ($validated) {
                                    $returnarray['Notification'][
                                        'Type'
                                    ] = $this->responseCodetoOutcome(
                                        $trTransactionResult->getStatusCode(),
                                        'Type'
                                    );
                                    $returnarray['Notification'][
                                        'Title'
                                    ] = $this->responseCodetoOutcome(
                                        $trTransactionResult->getStatusCode(),
                                        'Title'
                                    );
                                    $returnarray['Notification'][
                                        'Message'
                                    ] = $this->responseCodetoOutcome(
                                        $trTransactionResult->getStatusCode(),
                                        'Message'
                                    );
                                    $returnarray['Notification'][
                                        'Class'
                                    ] = $this->responseCodetoCss(
                                        $trTransactionResult->getStatusCode()
                                    );
                                    $returnarray['Order'][
                                        'OrderID'
                                    ] = $trTransactionResult->getOrderID();
                                    $returnarray['Order'][
                                        'OrderDescription'
                                    ] = $trTransactionResult->getOrderDescription();
                                    $returnarray['Order'][
                                        'AmountMinor'
                                    ] = $trTransactionResult->getAmount();
                                    $returnarray['Order'][
                                        'AmountMajor'
                                    ] = PayzoneHelper::getMajorAmount(
                                        $trTransactionResult->getCurrencyCode(),
                                        $trTransactionResult->getAmount()
                                    );
                                    $returnarray['Order'][
                                        'Amount'
                                    ] = PayzoneHelper::getFormattededCurrencyAmount(
                                        $trTransactionResult->getCurrencyCode(),
                                        $trTransactionResult->getAmount()
                                    );
                                    $returnarray['Order'][
                                        'CurrencyCode'
                                    ] = $trTransactionResult->getCurrencyCode();
                                    $returnarray['Order']['TransactionType'] =
                                        $this->transaction_type;
                                    $returnarray['Order'][
                                        'TransactionDateTime'
                                    ] = $trTransactionResult->getTransactionDateTime();
                                    $returnarray['Order']['HashDigest'] =
                                        $get['HashDigest'];
                                    $returnarray['Response']['CrossReference'] =
                                        $get['CrossReference'];
                                    $returnarray['Response'][
                                        'StatusCode'
                                    ] = $trTransactionResult->getStatusCode();
                                    $returnarray['Response'][
                                        'Message'
                                    ] = $trTransactionResult->getMessage();
                                    $returnarray['Response'][
                                        'PreviousResponse'
                                    ][
                                        'PreviousStatusCode'
                                    ] = $trTransactionResult->getPreviousStatusCode();
                                    $returnarray['Response'][
                                        'PreviousResponse'
                                    ][
                                        'PreviousMessage'
                                    ] = $trTransactionResult->getPreviousMessage();
                                    $returnarray['Response']['Checks'][
                                        'AddressNumericCheckResult'
                                    ] = $trTransactionResult->getAddressNumericCheckResult();
                                    $returnarray['Response']['Checks'][
                                        'PostCodeCheckResult'
                                    ] = $trTransactionResult->getPostCodeCheckResult();
                                    $returnarray['Response']['Checks'][
                                        'CV2CheckResult'
                                    ] = $trTransactionResult->getCV2CheckResult();
                                    $returnarray['Response']['Checks'][
                                        'ThreeDSecureAuthenticationCheckResult'
                                    ] = $trTransactionResult->getThreeDSecureAuthenticationCheckResult();
                                    $this->recordTransaction(
                                        $returnarray['Order']['OrderID'],
                                        $returnarray['Order']['Amount'],
                                        $returnarray['Order']['AmountMinor'],
                                        $returnarray['Order']['AmountMajor'],
                                        $returnarray['Order']['CurrencyCode'],
                                        $returnarray['Response'][
                                            'CrossReference'
                                        ],
                                        $returnarray['Response']['StatusCode'],
                                        $this->responseCodetoOutcome(
                                            $returnarray['Response'][
                                                'StatusCode'
                                            ],
                                            'Type'
                                        ),
                                        $returnarray['Order'][
                                            'TransactionDateTime'
                                        ],
                                        $returnarray['Response']['Message']
                                    );
                                } else {
                                    $returnarray['Notification']['Type'] =
                                        PayzoneResponseOutcomes::ERROR;
                                    $returnarray['Notification']['Title'] =
                                        'Problem processing transaction';
                                    $returnarray['Notification']['Message'] =
                                        'Unable to process transaction response, transaction hash validation failed.';
                                    $returnarray['Notification']['Class'] =
                                        PayzoneResponseCss::ERROR;
                                }
                            } else {
                                $returnarray['Notification']['Type'] =
                                    PayzoneResponseOutcomes::ERROR;
                                $returnarray['Notification']['Title'] =
                                    'Problem processing transaction';
                                $returnarray['Notification']['Message'] =
                                    'Unable to process transaction response, payment variables not sent from payment handler.';
                                $returnarray['Notification']['Message'] = isset(
                                    $post['ErrorMessages']
                                )
                                    ? $returnarray['Notification']['Message'].
                                        " \n ".
                                        $post['ErrorMessages']
                                    : $returnarray['Notification']['Message'];
                                $returnarray['Notification']['Class'] =
                                    PayzoneResponseCss::ERROR;
                            }
                            break;
                        default:
                            $returnarray['Notification']['Type'] =
                                PayzoneResponseOutcomes::ERROR;
                            $returnarray['Notification']['Title'] =
                                'Problem processing transaction';
                            $returnarray['Notification']['Message'] =
                                'Unable to process transaction response, unknown result delivery method used for transaction response.';
                            break;
                    }
                    break;
                case IntegrationType::DIRECT:
                    if (isset($post['CrossReference'])) {
                        $StringToHash = PayzoneHelper::generateStringToHashDirect(
                            $post['AmountMinor'],
                            $post['CurrencyCode'],
                            $post['OrderID'],
                            $post['OrderDescription'],
                            $this->secret_key
                        );
                        $HashDigest = PayzoneHelper::calculateHashDigest(
                            $StringToHash,
                            $this->secret_key,
                            $this->hash_method
                        );
                        if ($HashDigest == $post['HashDigest']) {
                            $returnarray['Notification'][
                                'Type'
                            ] = $this->responseCodetoOutcome(
                                $post['StatusCode'],
                                'Type'
                            );
                            $returnarray['Notification'][
                                'Title'
                            ] = $this->responseCodetoOutcome(
                                $post['StatusCode'],
                                'Title'
                            );
                            $returnarray['Notification'][
                                'Message'
                            ] = $this->responseCodetoOutcome(
                                $post['StatusCode'],
                                'Message'
                            );
                            $returnarray['Notification'][
                                'Class'
                            ] = $this->responseCodetoCss($post['StatusCode']);
                            $returnarray['Order']['OrderID'] = $post['OrderID'];
                            $returnarray['Order']['OrderDescription'] =
                                $post['OrderDescription'];
                            $returnarray['Order']['AmountMinor'] =
                                $post['AmountMinor'];
                            $returnarray['Order'][
                                'AmountMajor'
                            ] = PayzoneHelper::getMajorAmount(
                                $post['CurrencyCode'],
                                $post['AmountMinor']
                            );
                            $returnarray['Order'][
                                'Amount'
                            ] = PayzoneHelper::getFormattededCurrencyAmount(
                                $post['CurrencyCode'],
                                $post['AmountMinor']
                            );
                            $returnarray['Order']['CurrencyCode'] =
                                $post['CurrencyCode'];
                            $returnarray['Order']['TransactionType'] =
                                $this->transaction_type;
                            $returnarray['Order']['TransactionDateTime'] =
                                $post['TransactionDateTime'];
                            $returnarray['Order']['HashDigest'] =
                                $post['HashDigest'];
                            $returnarray['Response']['CrossReference'] =
                                $post['CrossReference'];
                            $returnarray['Response']['StatusCode'] =
                                $post['StatusCode'];
                            $returnarray['Response']['Message'] =
                                $post['Message'];
                            $returnarray['Response']['PreviousResponse'][
                                'PreviousMessage'
                            ] = isset($post['PreviousTransactionMessage'])
                                ? $post['PreviousTransactionMessage']
                                : '';
                            $this->recordTransaction(
                                $returnarray['Order']['OrderID'],
                                $returnarray['Order']['Amount'],
                                $returnarray['Order']['AmountMinor'],
                                $returnarray['Order']['AmountMajor'],
                                $returnarray['Order']['CurrencyCode'],
                                $returnarray['Response']['CrossReference'],
                                $returnarray['Response']['StatusCode'],
                                $this->responseCodetoOutcome(
                                    $returnarray['Response']['StatusCode'],
                                    'Type'
                                ),
                                $returnarray['Order']['TransactionDateTime'],
                                $returnarray['Response']['Message']
                            );
                        } else {
                            $returnarray['Notification']['Type'] =
                                PayzoneResponseOutcomes::ERROR;
                            $returnarray['Notification']['Title'] =
                                'Problem processing transaction';
                            $returnarray['Notification']['Message'] =
                                'Unable to process transaction response, hashed variables do not match.';
                            $returnarray['Notification']['Class'] =
                                PayzoneResponseCss::ERROR;
                        }
                    } else {
                        $returnarray['Notification']['Type'] =
                            PayzoneResponseOutcomes::ERROR;
                        $returnarray['Notification']['Title'] =
                            'Problem processing transaction';
                        $returnarray['Notification']['Message'] =
                            'Unable to process transaction response, payment variables not sent from payment handler.';
                        $returnarray['Notification']['Message'] = isset(
                            $post['ErrorMessages']
                        )
                            ? $returnarray['Notification']['Message'].
                                ' <br><br>'.
                                $post['ErrorMessages']
                            : $returnarray['Notification']['Message'];
                        $returnarray['Notification']['Class'] =
                            PayzoneResponseCss::ERROR;
                    }
                    break;
                case IntegrationType::TRANSPARENT:
                    if (isset($post['CrossReference'])) {
                        if (isset($post['PaREQ'])) {
                        } else {
                            $validated = PayzoneHelper::validateTransactionResultTransparent(
                                $this->merchant_id,
                                $this->merchant_password,
                                $this->pre_shared_key,
                                $this->hash_method,
                                $post,
                                $trTransactionResult,
                                $ValidateErrorMessage
                            );
                            if ($validated) {
                                $returnarray['Notification'][
                                    'Type'
                                ] = $this->responseCodetoOutcome(
                                    $post['StatusCode'],
                                    'Type'
                                );
                                $returnarray['Notification'][
                                    'Title'
                                ] = $this->responseCodetoOutcome(
                                    $post['StatusCode'],
                                    'Title'
                                );
                                $returnarray['Notification'][
                                    'Message'
                                ] = $this->responseCodetoOutcome(
                                    $post['StatusCode'],
                                    'Message'
                                );
                                $returnarray['Notification'][
                                    'Class'
                                ] = $this->responseCodetoCss(
                                    $post['StatusCode']
                                );
                                $returnarray['Order']['OrderID'] =
                                    $post['OrderID'];
                                $returnarray['Order']['OrderDescription'] =
                                    $post['OrderDescription'];
                                $returnarray['Order']['AmountMinor'] =
                                    $post['Amount'];
                                $returnarray['Order'][
                                    'AmountMajor'
                                ] = PayzoneHelper::getMajorAmount(
                                    $post['CurrencyCode'],
                                    $post['Amount']
                                );
                                $returnarray['Order'][
                                    'Amount'
                                ] = PayzoneHelper::getFormattededCurrencyAmount(
                                    $post['CurrencyCode'],
                                    $post['Amount']
                                );
                                $returnarray['Order']['CurrencyCode'] =
                                    $post['CurrencyCode'];
                                $returnarray['Order']['TransactionType'] =
                                    $this->transaction_type;
                                $returnarray['Order']['TransactionDateTime'] =
                                    $post['TransactionDateTime'];
                                $returnarray['Order']['HashDigest'] =
                                    $post['HashDigest'];
                                $returnarray['Response']['CrossReference'] =
                                    $post['CrossReference'];
                                $returnarray['Response']['StatusCode'] =
                                    $post['StatusCode'];
                                $returnarray['Response']['Message'] =
                                    $post['Message'];
                                $returnarray['Response']['PreviousResponse'][
                                    'PreviousMessage'
                                ] = isset($post['PreviousTransactionMessage'])
                                    ? $post['PreviousTransactionMessage']
                                    : '';
                                $this->recordTransaction(
                                    $returnarray['Order']['OrderID'],
                                    $returnarray['Order']['Amount'],
                                    $returnarray['Order']['AmountMinor'],
                                    $returnarray['Order']['AmountMajor'],
                                    $returnarray['Order']['CurrencyCode'],
                                    $returnarray['Response']['CrossReference'],
                                    $returnarray['Response']['StatusCode'],
                                    $this->responseCodetoOutcome(
                                        $returnarray['Response']['StatusCode'],
                                        'Type'
                                    ),
                                    $returnarray['Order'][
                                        'TransactionDateTime'
                                    ],
                                    $returnarray['Response']['Message']
                                );
                            } else {
                                $returnarray['Notification']['Type'] =
                                    PayzoneResponseOutcomes::ERROR;
                                $returnarray['Notification']['Title'] =
                                    'Problem processing transaction';
                                $returnarray['Notification']['Message'] =
                                    'Unable to process transaction response, hashed variables do not match.';
                                $returnarray['Notification']['Class'] =
                                    PayzoneResponseCss::ERROR;
                            }
                        }
                    } else {
                        $returnarray['Notification']['Type'] =
                            PayzoneResponseOutcomes::ERROR;
                        $returnarray['Notification']['Title'] =
                            'Problem processing transaction';
                        $returnarray['Notification']['Message'] =
                            'Unable to process transaction response, payment variables not sent from payment handler.';
                        $returnarray['Notification']['Message'] = isset(
                            $post['ErrorMessages']
                        )
                            ? $returnarray['Notification']['Message'].
                                ' <br><br>'.
                                $post['ErrorMessages']
                            : $returnarray['Notification']['Message'];
                        $returnarray['Notification']['Class'] =
                            PayzoneResponseCss::ERROR;
                    }
                    break;
                default:
                    $returnarray = 'Unable to verify responses';
                    break;
            }
        }

        return $returnarray;
    }

    /**
     * [responseCodetoOutcome Response code and type mapping to human readable responses].
     *
     * @method responseCodetoOutcome
     *
     * @param [Int]    $code
     * @param [String] $v
     *
     * @return [String] [Human readable reponse from gateway messages]
     */
    public function responseCodetoOutcome($code, $v)
    {
        switch ($code) {
            case 0:
                switch ($v) {
                    case 'Title':
                        $return = 'Payment processed';
                        break;
                    case 'Message':
                        $return = 'Thank you, your payment has been accepted.';
                        break;
                    case 'Type':
                        $return = PayzoneResponseOutcomes::SUCCESS;
                        break;
                    case 'Title-R':
                        $return = 'Refund processed';
                        break;
                    case 'Message-R':
                        $return = 'Thank you, your refund has been processed.';
                        break;
                    default:
                }
                break;
            case 3:
                $return = PayzoneResponseOutcomes::THREED;
                break;
            case 5:
                switch ($v) {
                    case 'Title':
                        $return = 'Card declined';
                        break;
                    case 'Message':
                        $return =
                            'Sorry, your payment has been declined. Please check the information entered and try again.';
                        break;
                    case 'Type':
                        $return = PayzoneResponseOutcomes::DECLINED;
                        break;
                    case 'Title-R':
                        $return = 'Refund declined';
                        break;
                    case 'Message-R':
                        $return =
                            'Sorry, the refund has been declined. Please check the information entered and try again.';
                        break;
                    default:
                }
                break;
            case 20:
                switch ($v) {
                    case 'Title':
                        $return = 'Duplicate Payment';
                        break;
                    case 'Message':
                        $return =
                            'Duplicate payment detected, the payment has not been taken again. Please see below reference for your previous transaction.';
                        break;
                    case 'Type':
                        $return = PayzoneResponseOutcomes::DUPLICATE;
                        break;
                    case 'Title-R':
                        $return = 'Duplicate Refund';
                        break;
                    case 'Message-R':
                        $return =
                            'Duplicate refund detected, the refund has not been processed again. Please see below reference for your previous refund.';
                        break;
                    default:
                }
                break;
            case 30:
            default:
                switch ($v) {
                    case 'Title':
                        $return = 'Payment Error';
                        break;
                    case 'Message':
                        $return =
                            'Sorry, your payment has not been successful. Please try again, if the problem persists please get in touch.';
                        break;
                    case 'Type':
                        $return = PayzoneResponseOutcomes::ERROR;
                        break;
                    case 'Title-R':
                        $return = 'Refund Error';
                        break;
                    case 'Message-R':
                        $return =
                            'Sorry, the refund has not been successful. Please try again, if the problem persists please get in touch.';
                        break;
                    default:
                }
                break;
        }

        return $return;
    }

    /**
     * [responseCodetoCss Map response code to css class defined by constants].
     *
     * @method responseCodetoCss
     *
     * @param [Int] $code
     *
     * @return [String] [Response code mapped from constant]
     */
    public function responseCodetoCss($code)
    {
        switch ($code) {
            case 0:
                $return = PayzoneResponseCss::SUCCESS;
                break;
            case 3:
                $return = 'payzone-3d'; //Should be activated for class referencing
                break;
            case 5:
                $return = PayzoneResponseCss::DECLINED;
                break;
            case 20:
                $return = PayzoneResponseCss::DUPLICATE;
                break;
            case 30:
            default:
                $return = PayzoneResponseCss::ERROR;
                break;
        }

        return $return;
    }
}
